#+OPTIONS: num:nil toc:nil
#+REVEAL_TRANS: slide
#+REVEAL_THEME: sky
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_HLEVEL: 2
#+Title: Chapter 12
#+Author: Bill Carlson
#+Email: bill.carlson@cotiviti.com

* Chapter 12

** Determine the Kinds
1. Given
#+BEGIN_SRC haskell
id :: a -> a
#+END_SRC
What is the kind of a?
#+ATTR_REVEAL: :frag t
#+BEGIN_SRC haskell
a :: *
#+END_SRC

2. Given
#+BEGIN_SRC haskell
r :: a -> f a
#+END_SRC
What are the kinds of a and f?
#+ATTR_REVEAL: :frag t
#+BEGIN_SRC haskell
a :: *
f :: * -> *
#+END_SRC

** String Processing

*** String Processing
Write a recursive function named replaceThe which takes a text/string,
breaks it into words and replaces each instance of “the” with “a”.

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC haskell
notThe :: String -> Maybe String
notThe s | s == "the" = Nothing
         | otherwise  = Just s

-- >>> replaceThe "the cow loves us"
-- "a cow loves us"
replaceThe :: String -> String
replaceThe "" = ""
replaceThe (' ':xs) = " " <> replaceThe xs
replaceThe string = let
  next = takeWhile (/= ' ') string
  rest = drop (length next) $ string
  word = fromMaybe "a" (notThe next)
  in word <> replaceThe rest
#+END_SRC

*** String Processing (another way)
#+BEGIN_SRC haskell
-- >>> replaceThe "the cow loves us"
-- "a cow loves us"
replaceThe' :: String -> String
replaceThe' sentence = let
  ws = words sentence
  transform w | w == "the" = "a"
              | otherwise  = w
  modifieds = map transform ws
  in unwords modifieds
#+END_SRC

*** String Processing 
Write a recursive function that takes a text/string, breaks it into
words, and counts the number of instances of ”the” followed by
a vowel-initial word.

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC haskell
countTheBeforeVowel :: String -> Integer
countTheBeforeVowel string = go 0 string
  where go :: Integer -> String -> Integer
        go count "" = 0
        go count (' ':xs) = go count xs
        go count sentence = let
          next = takeWhile (/= ' ') sentence
          vowel = elem (head next) ("aeiouAEIOU" :: [Char])
          in if (vowel) then count
             else let rest = drop (length next) sentence
                      count' = count + (maybe 1 (const 0) $ notThe next)
                      in go count' rest
#+END_SRC

*** String Processing 
Return the number of letters that are vowels in a word
#+ATTR_REVEAL: :frag t
#+BEGIN_SRC haskell
vowels :: [Char]
vowels = "aeiou"

isVowel :: Char -> Bool
isVowel c = elem (toLower c) vowels

countVowels :: String -> Integer
countVowels s = toInteger . length . (filter isVowel) $ s
#+END_SRC

** Validate the Word
#+ATTR_REVEAL: :frag t
#+BEGIN_SRC haskell
mkWord :: String -> Maybe Word'
mkWord s = let vowelCount = countVowels s
               consonantCount = (toInteger . length $ s) - vowelCount
               in if (vowelCount > consonantCount) then Nothing else Just (Word' s)
#+END_SRC

** It's Only Natural
#+BEGIN_SRC 
natToInteger :: Nat -> Integer
natToInteger n = go 0 n
  where go :: Integer -> Nat -> Integer
        go acc Zero = acc
        go acc (Succ nat) = go (acc + 1) nat
#+END_SRC

*** It's Only Natural 
#+BEGIN_SRC haskell
integerToNat :: Integer -> Maybe Nat
integerToNat i
  | i < 0     = Nothing
  | i == 0    = Just Zero
  | otherwise = Just . Succ . fromJust . integerToNat $ i - 1
  -- or fmap Succ (integerToNat (i - 1))
#+END_SRC

** Small Library for Maybe
See [[./Mayybe.hs][Mayybe.hs]]

** Small Library for Either
See [[./Either.hs][Either.hs]]

** Write Your Own ~iterate~ and ~unfoldr~
See [[./Unfold.hs][Unfold.hs]]

** Finally something other than a list!
See [[./BinaryTree.hs][BinaryTree.hs]]
